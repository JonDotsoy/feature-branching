name: 🚀 Deploy

on:
  push:
    branches: develop

permissions:
  contents: write
  statuses: write
  pull-requests: write

jobs:
  manifest-version:
    name: ⚙️ Prepare version
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{steps.release-please.outputs.releases_created}}
      head_branch_name: ${{steps.get_brach_name.outputs.head_branch_name}}
      version: ${{steps.prepare-version.outputs.VERSION}}
      version_minor: ${{steps.prepare-version.outputs.VERSION_MINOR}}
      version_major: ${{steps.prepare-version.outputs.VERSION_MAJOR}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Prerelease Action
        uses: google-github-actions/release-please-action@v3
        id: release-please
        with:
          release-type: node
          package-name: prerelease-action
          default-branch: ${{github.ref_name}}
      - id: get_brach_name
        run: |
          echo head_branch_name="$(echo "${pr:=$default_pr}" | jq '.headBranchName' -r)" >> $GITHUB_OUTPUT
        env:
          pr: ${{ steps.release-please.outputs.pr }}
          default_pr: |
            {"headBranchName":"${{ github.ref_name }}"}
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{steps.get_brach_name.outputs.head_branch_name}}
      - name: Update publish config
        run: npm pkg set publishConfig.tag=preview
      - name: Update publish config (With Latest)
        if: steps.release-please.outputs.releases_created
        run: npm pkg set publishConfig.tag=latest
      - id: capture-version
        name: Describe version relative
        run: |
          echo VERSION=v$(jq 'if .publishConfig.tag == "latest" then "\(.version)" else  "\(.version)-\(.publishConfig.tag)" end' package.json -r) >> $GITHUB_OUTPUT
      - run: echo ${{steps.capture-version.outputs.VERSION}} release created ${{steps.release-please.outputs.releases_created}}
      - run: npm add semver
      - env:
          version: ${{steps.capture-version.outputs.VERSION}}
          script: |
            const versionParsed = require("semver").parse(process.env.version);
            if (!versionParsed) throw new Error(`Invalid version ${process.env.version}`);
            const sufix = versionParsed.prerelease.length ? `-${versionParsed.prerelease.join('.')}` : '';
            console.log(`VERSION=${process.env.version}`);
            console.log(`VERSION_MINOR=v${versionParsed.major}.${versionParsed.minor}${sufix}`);
            console.log(`VERSION_MAJOR=v${versionParsed.major}${sufix}`);
        run: node -e "$script" >> $GITHUB_OUTPUT
        id: prepare-version

  deploy:
    needs: manifest-version
    name: 🚀 Deploy ${{ github.ref_name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure author github-actions[bot] at GIT
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - name: Setup Node16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm
      - name: Install Dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Clean Dev Dependencies
        run: npm prune --omit=dev
      - name: Add dependencies
        run: git add -f src/ node_modules/
      - name: 🚀 Chore deploy ${{ needs.manifest-version.outputs.version }}
        run: |
          git commit -m "chore: deploy ${{ needs.manifest-version.outputs.version }}"
          git tag -f ${{ needs.manifest-version.outputs.version }}
          git tag -f ${{ needs.manifest-version.outputs.version_minor }}
          git tag -f ${{ needs.manifest-version.outputs.version_major }}
          git push -f origin ${{ needs.manifest-version.outputs.version }}
          git push -f origin ${{ needs.manifest-version.outputs.version_minor }}
          git push -f origin ${{ needs.manifest-version.outputs.version_major }}
